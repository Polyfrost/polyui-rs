/* eslint-disable */
// This file was generated by [rspc](https://github.com/oscartbeaumont/rspc). Do not edit this file manually.

export type Procedures = {
	queries:
		| { key: 'buildInfo'; input: never; result: BuildInfo }
		| { key: 'jobs.getHistory'; input: LibraryArgs<null>; result: JobReport[] }
		| { key: 'jobs.getRunning'; input: LibraryArgs<null>; result: JobReport[] }
		| { key: 'jobs.isRunning'; input: LibraryArgs<null>; result: boolean }
		| { key: 'library.getStatistics'; input: LibraryArgs<null>; result: Statistics }
		| { key: 'library.list'; input: never; result: LibraryConfigWrapped[] }
		| { key: 'nodeState'; input: never; result: NodeState };
	mutations:
		| { key: 'library.create'; input: string; result: LibraryConfigWrapped }
		| { key: 'library.delete'; input: string; result: null }
		| { key: 'library.edit'; input: EditLibraryArgs; result: null };
	subscriptions: { key: 'invalidateQuery'; input: never; result: InvalidateOperationEvent };
};

export type BuildInfo = { version: string; commit: string };

export type ConfigMetadata = { version: string | null };

export type EditLibraryArgs = { id: string; name: string | null; description: string | null };

export type InvalidateOperationEvent = { key: string; arg: any };

export type JobReport = {
	id: string;
	name: string;
	data: number[] | null;
	metadata: any | null;
	date_created: string;
	date_modified: string;
	status: JobStatus;
	task_count: number;
	completed_task_count: number;
	message: string;
	seconds_elapsed: number;
};

export type JobStatus = 'Queued' | 'Running' | 'Completed' | 'Canceled' | 'Failed' | 'Paused';

export type LibraryArgs<T> = { library_id: string; arg: T };

/**
 *  LibraryConfig holds the configuration for a specific library. This is stored as a '{uuid}.sdlibrary' file.
 */
export type LibraryConfig = { version: string | null } & { name: string; description: string };

export type LibraryConfigWrapped = { uuid: string; config: LibraryConfig };

/**
 *  NodeConfig is the configuration for a node. This is shared between all libraries and is stored in a JSON file on disk.
 */
export type NodeConfig = { version: string | null } & { id: string; name: string };

export type NodeState = ({ version: string | null } & { id: string; name: string }) & {
	data_path: string;
};

export type Statistics = {
	id: number;
	date_captured: string;
	total_instance_count: number;
	library_db_size: string;
	total_bytes_used: string;
	oneconfig_stats: string;
};
